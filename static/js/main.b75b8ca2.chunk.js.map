{"version":3,"sources":["GetData.js","Person.js","Update.js","images/vinson.jpg","images/chimin.jpg","images/junhui.jpg","App.js","reportWebVitals.js","index.js"],"names":["GetData","load","a","doc","useServiceAccountAuth","creds","loadInfo","sheet","sheetsByIndex","winnings","getRows","rows","totalWinnings","vinson","chimin","junhui","forEach","row","parseFloat","updateWinnings","date","Date","day","getDate","month","getMonth","year","getFullYear","then","addRow","this","sheetId","GoogleSpreadsheet","Person","props","style","backgroundImage","img","className","Update","defaultValues","useState","values","setValues","error","setError","handleInputChange","event","target","name","value","onSubmit","preventDefault","console","log","getData","setWinnings","type","placeholder","onChange","App","useEffect","response","Vinson","Chimin","Junhui","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b75b8ca2.chunk.js","sourcesContent":["import { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport creds from \"./creds.json\";\n\nclass GetData {\n    constructor() {\n        this.creds = creds;\n        this.sheetId = \"11dt-oyCdi5iNKrGJrQLg6sMNGmpitiF5rLGiX3yvGoE\";\n        this.doc = new GoogleSpreadsheet(this.sheetId);\n    }\n\n    load = async () => {\n        await this.doc.useServiceAccountAuth(this.creds);\n        await this.doc.loadInfo();\n        this.sheet = this.doc.sheetsByIndex[0];\n    };\n\n    winnings = async () => {\n        this.rows = await this.sheet.getRows();\n        let totalWinnings = { vinson: 0, chimin: 0, junhui: 0 };\n        this.rows.forEach((row) => {\n            totalWinnings.vinson += parseFloat(row.vinson);\n            totalWinnings.chimin += parseFloat(row.chimin);\n            totalWinnings.junhui += parseFloat(row.junhui);\n        });\n        return totalWinnings;\n    };\n\n    updateWinnings = async (vinson, chimin, junhui) => {\n        var date = new Date();\n        var day = date.getDate();\n        var month = date.getMonth() + 1;\n        var year = date.getFullYear();\n        this.load().then(() => {\n            this.sheet.addRow({\n                date: `${day} ${month} ${year}`,\n                vinson: vinson,\n                chimin: chimin,\n                junhui: junhui,\n            });\n        });\n\n        return this.winnings();\n    };\n}\n\nexport default GetData;\n","function Person(props) {\n    const style = { backgroundImage: `url(${props.img})` };\n\n    return (\n        <div className=\"row person-row\">\n            <div\n                className=\"col-12 col-md-6 p-5 person-picture\"\n                style={style}\n            ></div>\n            <div className=\"col-12 col-md-6 p-3 bg-dark d-flex align-items-center justify-content-center\">\n                <h5 className=\"pri-font m-0 text-white\"> ${props.winnings}</h5>\n            </div>\n        </div>\n    );\n}\n\nexport default Person;\n","import { useEffect, useState } from \"react\";\n\nfunction Update(props) {\n    // Set blank values for input fields\n    const defaultValues = {\n        vinson: \"\",\n        chimin: \"\",\n        junhui: \"\",\n    };\n\n    // Use State Hooks\n    const [values, setValues] = useState(defaultValues);\n    const [error, setError] = useState(\"\");\n\n    // Handle inputchanges to input fields\n    const handleInputChange = (event) => {\n        setValues({ ...values, [event.target.name]: event.target.value });\n    };\n\n    // Handle submit form\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        let vinson = parseFloat(values.vinson);\n        let chimin = parseFloat(values.chimin);\n        let junhui = parseFloat(values.junhui);\n\n        // Checks if amounts tabulate to zero, otherwise show error message\n        if (vinson + chimin + junhui !== 0) {\n            setError(\"Amounts do not match\");\n            return;\n        } else {\n            console.log('hello')\n            setError(\"\");\n        }\n\n        let winnings = props.getData.updateWinnings(vinson, chimin, junhui);\n        setValues(defaultValues);\n        props.setWinnings({\n            winnings,\n        });\n    };\n\n    return (\n        <div className=\"row p-3 justify-content-center\">\n            <div className=\"col-12 col-md-4\">\n                <h1 className=\"pri-font\">{error}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input\n                        type=\"number\"\n                        className=\"form-control my-3\"\n                        name=\"vinson\"\n                        placeholder=\"Vinson\"\n                        onChange={handleInputChange}\n                        value={values.vinson}\n                    />\n                    <input\n                        type=\"number\"\n                        className=\"form-control my-3\"\n                        name=\"chimin\"\n                        placeholder=\"Chimin\"\n                        onChange={handleInputChange}\n                        value={values.chimin}\n                    />\n                    <input\n                        type=\"number\"\n                        className=\"form-control my-3\"\n                        name=\"junhui\"\n                        placeholder=\"Junhui\"\n                        value={values.junhui}\n                        onChange={handleInputChange}\n                    />\n                    <button type=\"submit\" className=\"btn btn-outline-dark\">\n                        Tabulate Winnings\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Update;\n","export default __webpack_public_path__ + \"static/media/vinson.a1a4ae1c.jpg\";","export default __webpack_public_path__ + \"static/media/chimin.92fdd636.jpg\";","export default __webpack_public_path__ + \"static/media/junhui.0e801f85.jpg\";","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport GetData from \"./GetData\";\nimport Person from \"./Person\";\nimport Update from \"./Update\";\nimport Vinson from \"./images/vinson.jpg\";\nimport Chimin from \"./images/chimin.jpg\";\nimport Junhui from \"./images/junhui.jpg\";\n\nfunction App() {\n    const [winnings, setWinnings] = useState({\n        vinson: \"Loading ...\",\n        chimin: \"Loading ...\",\n        junhui: \"Loading ...\",\n    });\n    const getData = new GetData();\n\n    useEffect(() => {\n        getData\n            .load()\n            .then(() => getData.winnings())\n            .then((response) => setWinnings(response));\n    });\n\n    return (\n        <div className=\"App\">\n            <div className=\"container-fluid\">\n                <div className=\"row bg-dark\">\n                    <div className=\"col p-3\">\n                        <h1 className=\"pri-font text-white text-center\">\n                            The Pasir Ris Boys\n                        </h1>\n                    </div>\n                </div>\n                <Person name=\"Vinson\" winnings={winnings.vinson} img={Vinson} />\n                <Person\n                    name=\"Chi Min\"\n                    winnings={winnings.chimin}\n                    img={Chimin}\n                />\n                <Person\n                    name=\"Jun Hui\"\n                    winnings={winnings.junhui}\n                    img={Junhui}\n                />\n                <Update setWinnings={setWinnings} getData={getData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}